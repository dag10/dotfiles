#!/usr/bin/env python3

import sys
import os
import json
import subprocess
import argparse

CODE_APPDATA_PATH = os.path.expanduser('~/Library/Application Support/Code/')
WORKSPACE_STORAGE_PATH = os.path.join(CODE_APPDATA_PATH, "User/workspaceStorage")

class StateDir:
    def __init__(self, hash):
        self.hash = hash
        self.state_path = os.path.join(WORKSPACE_STORAGE_PATH, hash)
        self.workspace_path = None

    def parse_path_from_workspace_json(self, debug=False):
        workspace_json_path = os.path.join(self.state_path, 'workspace.json')
        if not os.path.isfile(workspace_json_path):
            if debug:
                print(f'  No workspace.json found at: "{workspace_json_path}"')
            return None

        workspace_json_raw = ''.join(open(workspace_json_path, 'r'))
        workspace_json = json.loads(workspace_json_raw)

        if 'workspace' in workspace_json:
            return workspace_json['workspace']
        elif 'folder' in workspace_json:
            return workspace_json['folder']
        else:
            if debug:
                print(f'  No "workspace" or "folder" found in workspace.json: {workspace_json}')
            return None

    def parse_path_from_meta_json(self, debug=False):
        meta_json_path = os.path.join(self.state_path, 'meta.json')
        if not os.path.isfile(meta_json_path):
            if debug:
                print(f'  No meta.json found at: "{meta_json_path}"')
            return None

        meta_json_raw = ''.join(open(meta_json_path, 'r'))
        meta_json = json.loads(meta_json_raw)

        if 'configuration' in meta_json:
            return meta_json['configuration']
        else:
            if debug:
                print(f'  No "configuration" found in meta.json: {meta_json}')
            return None

    def scan(self, debug=False):
        if debug:
            print(f'Scanning possible workspace state dir: "{self.state_path}"')

        workspace_path_from_workspace_json = self.parse_path_from_workspace_json(debug=debug)
        workspace_path_from_meta_json = self.parse_path_from_meta_json(debug=debug)

        if not workspace_path_from_workspace_json and not workspace_path_from_meta_json:
            return False
        workspace_path = workspace_path_from_workspace_json or workspace_path_from_meta_json

        if not workspace_path.startswith('file://'):
            if debug:
                print(f'  Workspace path doesn\'t start with "file://": "{workspace_path}"')
            return False
        workspace_path = workspace_path[len('file://'):]

        if debug:
            print(f'  Scanned. State corresponds to workspace path: "{workspace_path}"')
        
        self.workspace_path = workspace_path
        return True

def GetStateDirs(debug=False):
    for dir in os.listdir(WORKSPACE_STORAGE_PATH):
        state_dir = StateDir(dir)
        if state_dir.scan(debug=debug):
            yield state_dir
        if debug:
            print()

def ResetWorkspace(workspace_to_reset_path, dry_run=False, debug=False):
    success = False
    for state_dir in GetStateDirs(debug=False):
        if state_dir.workspace_path != workspace_to_reset_path:
            if debug:
                print('Not a match:', state_dir.workspace_path)
            continue

        # We have a match, print detailed debug info for it:
        if debug:
            StateDir(state_dir.hash).scan(debug=True)

        if dry_run:
            print(f'Would delete workspace state directory: "{state_dir.state_path}"')
        else:
            if IsVSCodeRunning():
                print('You must fully quit Visual Studio Code before resetting a workspace.', file=sys.stderr)
                return False
            else:
                print(f'Deleting workspace state directory: "{state_dir.state_path}"')
                subprocess.run(['trash', '-F', state_dir.state_path], check=True)

        success = True
    
    if not success:
        if debug:
            for state_dir in GetStateDirs(debug=True):
                pass
        print(f'No state databases found for path: "{workspace_to_reset_path}"', file=sys.stderr)
    
    return success

def ListWorkspaceStates(debug=False):
    for state_dir in GetStateDirs(debug=debug):
        print(state_dir.workspace_path)

def ExitWithBool(success):
    sys.exit(0 if success else 1)

def IsVSCodeRunning():
    return bool(subprocess.getoutput('ps -ef | grep "Code Helper (Renderer).app" | grep -v "grep"'))

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Deletes the workspace state for a VSCode workspace (by moving to trash).')
    parser.add_argument('--debug', '-d', action='store_true', help="Print verbose debugging info.")
    parser.add_argument('--dry-run', '-n', action='store_true', help="Just print what would be deleted.")

    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument('--list', '-l', action='store_true', help="Just list all workspace state databases found.")
    group.add_argument('path', nargs='?', type=str, help="Path to a workspace folder or code-workspace file. For current directory, use '.'")

    if len(sys.argv) == 1:
        parser.print_help()
        sys.exit(0)

    args = parser.parse_args()

    if args.list:
        ExitWithBool(ListWorkspaceStates(debug=args.debug))

    cwd = os.getcwd()
    arg_path = args.path
    if arg_path == '.':
        arg_path = ''
    workspace_path = os.path.join(cwd, arg_path)

    ExitWithBool(ResetWorkspace(workspace_path, dry_run=args.dry_run, debug=args.debug))
